---
swagger: "2.0"
info:
  version: "0.1"
  title: "s8scala"
schemes:
- "https"
paths:
  /users:
    post:
      operationId: postUsers
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: params
          in: body
          schema:
            $ref: "#/definitions/UserForCreate"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/UserForModified"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/Error"
        408:
          description: "timed out"
        500:
          description: "internal server eorror"
    get:
      operationId: getUsers
      produces:
      - "application/json"
      parameters:
      - name: next
        in: query
        type: string
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/Users"
        204:
          description: "no contents"
          schema:
            $ref: "#/definitions/Empty"
        408:
          description: "timed out"
        500:
          description: "internal server eorror"
  /users/{id}:
    get:
      operationId: getUser
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "not found"
        408:
          description: "timed out"
        500:
          description: "internal server eorror"
    put:
      operationId: putUser
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      - name: params
        in: body
        schema:
          $ref: "#/definitions/UserForUpdate"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/UserForModified"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "not found"
        408:
          description: "timed out"
        409:
          description: "conflict"
        500:
          description: "internal server eorror"
    delete:
      operationId: deleteUser
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: "success"
          schema:
            $ref: "#/definitions/Empty"
        404:
          description: "not found"
        408:
          description: "timed out"
        500:
          description: "internal server eorror"

definitions:
  UserForCreate:
    type: object
    required:
      - name
      - email
    properties:
      name:
        type: string
      email:
        type: string
        format: email
  UserForModified:
    type: object
    required:
      - id
      - version
      - name
      - email
    properties:
      id:
        type: string
        format: uuid
      version:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
        format: email
  User:
    type: object
    required:
      - id
      - version
      - name
      - email
    properties:
      id:
        type: string
        format: uuid
      version:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
        format: email
  Users:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/User"
      next:
        type: string
  UserForUpdate:
    type: object
    required:
      - version
      - name
      - email
    properties:
      version:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
        format: email
  Error:
    type: object
    required:
      - code
    properties:
      code:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
  ErrorDetail:
    type: object
    required:
      - reason
    properties:
      reason:
        type: string
      item:
        type: string
      args:
        type: array
        items:
          type: object
  Empty:
    type: "object"
